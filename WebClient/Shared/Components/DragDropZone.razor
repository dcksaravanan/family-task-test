@typeparam TItem
@using System.Text
@using WebClient.Services
@implements IDisposable

<div class="@GetClassesForDropzone()" @ondragover:preventDefault @ondragover="()=> { }" @ondragenter:preventDefault @ondragenter="()=> { }" @ondrop="()=>OnDrop()" @ondrop:preventDefault ondragstart="event.dataTransfer.setData('text', event.target.id);">

    @foreach (var item in Items)
    {

        if (Items.IndexOf(item) == 0 && MaxItems == null || MaxItems > 1)
        {
            <div @ondrop="()=>OnDropItemOnSpacing(0)" @ondragenter="()=>DragDropService.ActiveSpacerId =  0" @ondragleave="()=>DragDropService.ActiveSpacerId = null" class="@GetClassesForSpacing(0)"></div>
        }

        <div draggable="@IsItemDragable(item)"
             @ondragstart="()=>OnDragStart(item)"
             @ondragend="()=>OnDragEnd()"
             @ondragenter="()=>OnDragEnter(item)"
             @ondragleave="()=>OnDragLeave()"
             class="@GetClassesForDraggable() @CheckIfItemIsInTransit(item) @CheckIfItemIsDragTarget(item) @CheckIfDragOperationIsInProgess() @CheckIfDraggable(item)">

            @{
                if (ChildContent != null)
                {
                    @ChildContent(item);
                }
            }

        </div>

        @if (MaxItems == null || MaxItems > 1)
        {
            <div @ondrop="()=>OnDropItemOnSpacing(Items.IndexOf(item)+1)" @ondragenter="()=>DragDropService.ActiveSpacerId = Items.IndexOf(item)+1" @ondragleave="()=>DragDropService.ActiveSpacerId = null" class="@CheckIfDragOperationIsInProgess() @GetClassesForSpacing(Items.IndexOf(item)+1)"></div>
        }
    }
</div>


@code {
    [Inject]
    DragDropService<TItem> DragDropService { get; set; }

    private void OnDropItemOnSpacing(int newIndex)
    {
        if (!IsDropAllowed())
        {
            DragDropService.Reset();
            return;
        }

        var activeItem = DragDropService.ActiveItem;
        var oldIndex = Items.IndexOf(activeItem);

        if (oldIndex == -1) // item not present in target dropzone
        {
            if (CopyItem == null)
            {
                DragDropService.Items.Remove(activeItem);
            }
        }
        else // same dropzone drop
        {
            Items.RemoveAt(oldIndex);
            // the actual index could have shifted due to the removal
            if (newIndex > oldIndex) newIndex--;
        }

        if (CopyItem == null)
        {
            Items.Insert(newIndex, activeItem);
        }
        else
        {
            Items.Insert(newIndex, CopyItem(activeItem));
        }

        //Operation is finished
        DragDropService.Reset();
        OnItemDrop.InvokeAsync(activeItem);
    }

    private bool IsMaxItemLimitReached()
    {
        var activeItem = DragDropService.ActiveItem;

        return (!Items.Contains(activeItem) && MaxItems.HasValue && MaxItems == Items.Count());
    }

    private string IsItemDragable(TItem item)
    {
        if (AllowsDrag == null) return "true";
        if (item == null) return "false";

        return AllowsDrag(item).ToString();
    }

    private bool IsItemAccepted()
    {
        if (Accepts == null) return true;

        return Accepts(DragDropService.ActiveItem, DragDropService.DragTargetItem);
    }

    private bool IsValidItem()
    {
        return DragDropService.ActiveItem != null;
    }

    protected override bool ShouldRender()
    {
        return DragDropService.ShouldRender;
    }

    private void ForceRender(object sender, EventArgs e)
    {
        StateHasChanged();
    }


    protected override void OnInitialized()
    {
        DragDropService.StateHasChanged += ForceRender;

        base.OnInitialized();
    }

    public string CheckIfDraggable(TItem item)
    {
        if (AllowsDrag == null) return string.Empty;
        if (item == null) return string.Empty;

        if (AllowsDrag(item)) return string.Empty;

        return "plk-dd-noselect";
    }
    public string CheckIfDragOperationIsInProgess()
    {
        var activeItem = DragDropService.ActiveItem;

        return activeItem == null ? string.Empty : "plk-dd-inprogess";
    }

    public void OnDragEnd()
    {
        DragDropService.Reset();
        //dragTargetItem = default;
    }

    public void OnDragEnter(TItem item)
    {
        var activeItem = DragDropService.ActiveItem;

        if (item.Equals(activeItem)) return;

        //if (!IsValidItem()) return;

        if (IsMaxItemLimitReached()) return;

        if (!IsItemAccepted()) return;

        DragDropService.DragTargetItem = item;

        DragDropService.ShouldRender = true;
        StateHasChanged();
        DragDropService.ShouldRender = false;
    }

    public void OnDragLeave()
    {
        //DragDropService.DragTargetItem = default;

        DragDropService.ShouldRender = true;
        StateHasChanged();
        DragDropService.ShouldRender = false;
    }

    public void OnDragStart(TItem item)
    {
        DragDropService.ShouldRender = true;
        DragDropService.ActiveItem = item;
        DragDropService.Items = Items;
        OnItemDrag.InvokeAsync(item);
        StateHasChanged();
        DragDropService.ShouldRender = false;
    }

    public string CheckIfItemIsInTransit(TItem item)
    {
        return item.Equals(DragDropService.ActiveItem) ? "plk-dd-in-transit no-pointer-events" : string.Empty;
    }

    public string CheckIfItemIsDragTarget(TItem item)
    {
        if (item.Equals(DragDropService.ActiveItem)) return string.Empty;

        if (item.Equals(DragDropService.DragTargetItem))
        {
            return IsItemAccepted() ? "plk-dd-dragged-over" : "plk-dd-dragged-over-denied";
        }

        return string.Empty;
    }

    private string GetClassesForDraggable()
    {
        var builder = new StringBuilder();

        builder.Append("plk-dd-draggable");

        if (!String.IsNullOrEmpty(ItemWrapperClass))
        {
            builder.AppendLine(" " + ItemWrapperClass);
        }

        return builder.ToString();
    }

    private string GetClassesForDropzone()
    {
        var builder = new StringBuilder();

        builder.Append("plk-dd-dropzone");

        if (!String.IsNullOrEmpty(Class))
        {
            builder.AppendLine(" " + Class);
        }

        return builder.ToString();
    }

    private string GetClassesForSpacing(int spacerId)
    {
        var builder = new StringBuilder();

        builder.Append("plk-dd-spacing");

        //if active space id and item is from another dropzone -> always create insert space
        if (DragDropService.ActiveSpacerId == spacerId && Items.IndexOf(DragDropService.ActiveItem) == -1)
        {
            builder.Append(" plk-dd-spacing-dragged-over");
        } // else -> check if active space id and that it is an item that needs space
        else if (DragDropService.ActiveSpacerId == spacerId && (spacerId != Items.IndexOf(DragDropService.ActiveItem)) && (spacerId != Items.IndexOf(DragDropService.ActiveItem) + 1))
        {
            builder.Append(" plk-dd-spacing-dragged-over");
        }

        return builder.ToString();
    }

    /// <summary>
    /// Allows to pass a delegate which executes if something is dropped and decides if the item is accepted
    /// </summary>
    [Parameter] public Func<TItem, TItem, bool> Accepts { get; set; }


    /// <summary>
    /// Allows to pass a delegate which executes if something is dropped and decides if the item is accepted
    /// </summary>
    [Parameter] public Func<TItem, bool> AllowsDrag { get; set; }

    /// <summary>
    /// Raises a callback with the dropped item as parameter in case the item can not be dropped due to the given Accept Delegate
    /// </summary>
    [Parameter] public EventCallback<TItem> OnItemDropRejected { get; set; }

    /// <summary>
    /// Raises a callback with the dropped item as parameter
    /// </summary>
    [Parameter] public EventCallback<TItem> OnItemDrop { get; set; }
    [Parameter] public EventCallback<TItem> OnItemDrag { get; set; }

    /// <summary>
    /// If set to true, items will we be swapped/inserted instantly.
    /// </summary>
    [Parameter] public bool InstantReplace { get; set; }

    /// <summary>
    /// List of items for the dropzone
    /// </summary>
    [Parameter] public IList<TItem> Items { get; set; }

    /// <summary>
    /// Maximum Number of items which can be dropped in this dropzone. Defaults to null which means unlimited.
    /// </summary>
    [Parameter] public int? MaxItems { get; set; }

    /// <summary>
    /// Raises a callback with the dropped item as parameter in case the item can not be dropped due to item limit.
    /// </summary>
    [Parameter] public EventCallback<TItem> OnItemDropRejectedByMaxItemLimit { get; set; }

    [Parameter] public RenderFragment<TItem> ChildContent { get; set; }

    /// <summary>
    /// Specifies one or more classnames for the Dropzone element.
    /// </summary>
    [Parameter] public string Class { get; set; }

    /// <summary>
    /// Specifies the id for the Dropzone element.
    /// </summary>
    [Parameter] public string Id { get; set; }

    /// <summary>
    /// Specifies one or more classnames for the draggable div that wraps your elements.
    /// </summary>
    [Parameter] public string ItemWrapperClass { get; set; }

    /// <summary>
    /// If set items dropped are copied to this dropzone and are not removed from their source.
    /// </summary>
    [Parameter] public Func<TItem, TItem> CopyItem { get; set; }

    private bool IsDropAllowed()
    {
        var activeItem = DragDropService.ActiveItem;

        if (IsMaxItemLimitReached())
        {
            OnItemDropRejectedByMaxItemLimit.InvokeAsync(activeItem);
            return false;
        }

        if (!IsItemAccepted())
        {
            OnItemDropRejected.InvokeAsync(activeItem);
            return false;
        }

        return true;
    }

    private void OnDrop()
    {
        DragDropService.ShouldRender = true;

        if (!IsDropAllowed())
        {
            DragDropService.Reset();
            return;
        }

        var activeItem = DragDropService.DragTargetItem;

        //DragDropService.Reset();

        StateHasChanged();

        OnItemDrop.InvokeAsync(activeItem);
    }

    public void Dispose()
    {
        DragDropService.StateHasChanged -= ForceRender;
    }
}
